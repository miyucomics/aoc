My first attempt at this used Karger's Min Cut algorithm and it took anywhere from 0.05 seconds to 10 seconds based on luck because of the random edge contractions it uses. Sometimes it happens to find the right edges to contract right away and sometimes it takes a few seconds. Part of that is unavoidable because of the nature of Karger's algorithm, and part of that is due to my likely-unoptimable implementation of it.

Update about 10 months later: However, I really didn't like the probablity aspect so I decided to rewrite my solution, taking heavy advantage of the insane processing speeds of sets to just obliterate this problem. It's funny that I went from a "smart" 56-line solution only to realize that a simple 20 lines was all I needed. The graph theory class I took also helped greatly, as well as just general programming knowledge.

My new approach forms one large partite containing the entire graph, and then removes vertices from that partite until it forms two separate partites with only 3 connections between them. The strangeness function returns how strange a vertex is, or how many connections it has to vertices that are not within the current partite.
